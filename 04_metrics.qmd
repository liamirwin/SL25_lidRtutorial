---
title: "Lidar Summary Metrics"
---

```{r setup, include=FALSE}
source("R/setup_rgl.R")
```

## Relevant Resources

-   [Code](https://github.com/liamirwin/SL25_lidRtutorial/blob/main/R/04_metrics.R)
-   [lidRbook metrics section](https://r-lidar.github.io/lidRbook/grid_metrics.html)
-   [lidRbook modelling section](https://r-lidar.github.io/lidRbook/modelling.html)
-   [lidRmetrics package for additional metrics](https://ptompalski.github.io/lidRmetrics/ "Tutorial website for lidRmetrics package")

## Overview

This code demonstrates generating **pixel-based summary metrics** of lidar data. This is a common task to capture critical information describing the vertical distribution of lidar returns across a regular grid (raster). Pixel metrics are used in various predictive modelling tasks and often to capture critical vegetation characteristics ranging from height to variability and cover.

Beyond statistical summary metrics such as (*mean*, *max*, *sd*, etc), many researchers have developed custom metrics linked to critical vegetation attributes such as **leaf-area index**, **vertical complexity indices**, etc.

Additional metrics can also be generated with `lidR` using **voxel approaches**, where three-dimensional sub-compartments are fit to better capture complexity â€” *at the cost of vastly increasing computational* requirements and introducing additional parameters.

Classically, lidar metrics used in vegetation characterization typically fall under three categories:

1.  **Height metrics**\
    These typically describe how tall the vegetation is. Often max height, mean height, and percentiles of height are important in the prediction of attributes including land cover, and continuous variables like biomass.

2.  **Variability metrics**\
    Metrics describing the shape of the distribution of returns often capture additional signals useful for explaining the level of vegetation complexity within a pixel. Skewed versus bimodal distributions, for example, can represent a very dense upper canopy in a forest compared to a multi-layer stand.

3.  **Cover metrics**\
    Often referred directly to as *canopy cover*, these metrics generally describe the proportion of returns (as a %) above a certain threshold. This is generally used to describe how much vegetation there is at a given height (e.g. above 2m) compared to ground and other lower surfaces (designed for forest).

```{r als_metrics_cs, echo = FALSE, message = FALSE, warning = FALSE}
#| fig-cap: "Two-dimensional cross section of 20x20m area from `fm_norm.laz` some metrics are generated and presented alongside the coordinates of the points within this example cell"
source('R/metrics_transect.R')
```

## Environment

```{r clear warnings, warnings = FALSE, message=FALSE}
# Clear environment
rm(list = ls(globalenv()))

# Load packages
library(lidR)
library(terra)
library(lidRmetrics)
```

## Basic Usage

To begin we compute simple metrics, such as mean and max height, within 10x10 m pixels and visualize the results. The code shows how to compute single metrics or multiple metrics simultaneously using predefined metric sets. Advanced usage introduces user-defined metrics for more specialized calculations.

```{r load_lidar_data}
# Load the normalized lidar data
las <- readLAS(files = "data/fm_norm.laz")
```

The `pixel_metrics()` function calculates structural metrics within a defined spatial resolution (`res`).

```{r mean_height_pixel_metrics}
#| label: fig-metrics-mean-height
#| fig-cap: "Raster of mean lidar return height (Z) calculated at a 10m resolution."
# Compute the mean height of points within 10x10 m pixels
hmean <- pixel_metrics(las = las, func = ~mean(Z), res = 10)
hmean
plot(hmean)
```

```{r max_height_pixel_metrics}
#| label: fig-metrics-max-height
#| fig-cap: "Raster of maximum lidar return height (Z) calculated at a 10m resolution."
# Compute the max height of points within 10x10 m pixels
hmax <- pixel_metrics(las = las, func = ~max(Z), res = 10)
hmax
plot(hmax)
```

You can specify that multiple metrics should be calculated by housing them in a `list()`.

```{r multiple_metrics_pixel_metrics}
#| label: fig-metrics-multi
#| fig-cap: "Raster plot showing multiple metrics (maximum and mean height) calculated simultaneously at 10m resolution."
# Compute several metrics at once using a list
metrics <- pixel_metrics(las = las, func = ~list(hmax = max(Z), hmean = mean(Z)), res = 10)
metrics
plot(metrics)
```

Pre-defined metric sets are available, such as `.stdmetrics_z`. See more [here](https://github.com/r-lidar/lidR/wiki/stdmetrics).

```{r predefined_metrics_pixel_metrics}
#| label: fig-metrics-std
#| fig-cap: "Range of Metrics Raster calculated from predefined `.stdmetrics_z` set."
# Simplify computing metrics with predefined sets of metrics
metrics <- pixel_metrics(las = las, func = .stdmetrics_z, res = 10)
metrics
plot(metrics)
```

We can examine the distribution of the standard deviation of return heights across the 10m grid cells by sub-setting this metric and plotting the raster. Even this simple metric demonstrates the variability in vertical vegetation structure across this dataset.

```{r predefined_metrics_pixel_metrics_zsd}
#| label: fig-metrics-zsd
#| fig-cap: "Raster of the standard deviation of lidar return heights (`zsd`), a metric from the `.stdmetrics_z` set."
# Plot a specific metric from the predefined set
plot(metrics, "zsd")
```

## Advanced Usage with User-Defined Metrics

::: callout-tip
## [3rd party lidar metrics packages](https://r-lidar.github.io/lidRbook/metrics.html#metrics-3rd-party)

`lidR` provides flexibility for users to define custom metrics. Check out 3rd party packages like [`lidRmetrics`](https://github.com/ptompalski/lidRmetrics) for suites of advanced metrics typically demonstrated in peer-reviewed articles and implemented in `lidR` through [`lidRmetrics`](https://github.com/ptompalski/lidRmetrics).
:::

We will present several metrics often tied to vegetation and biodiversity. For an overview of connecting metrics with habitat see [this article](http://doi.org/10.1016/j.ecolind.2016.02.057 "Coops, N. C., Tompaski, P., Nijland, W., Rickbeil, G. J. M., Nielsen, S. E., Bater, C. W., & Stadt, J. J. (2016). A forest structure habitat index based on airborne laser scanning data. Ecological Indicators, 67, 346-357.").

[Canopy Cover](https://ptompalski.github.io/lidRmetrics/reference/metrics_percabove.html "Proportion of returns above a threshold (2m) is commonly used to approximate canopy cover in forests and beyond")

Canopy cover is often estimated using the proportion of lidar returns generated over some threshold. Two metres is commonly used, ultimately canopy cover seeks to quantify relatively how much vegetation (points) is present.

```{r canopy_cover}
#| label: fig-metrics-canopy-cover
#| fig-cap: "Canopy cover metric, calculated as the proportion of lidar returns above a 2m threshold."
cc_metrics <- pixel_metrics(las, func = ~metrics_percabove(z = Z, threshold = 2, zmin = 0), res = 10)
plot(cc_metrics)
```

[Leaf Area Density Profiles](https://ptompalski.github.io/lidRmetrics/reference/metrics_lad.html "LAD profiles are commonly used in predictive modelling to approximate the leaf area index (LAI) of vegetation with lidar") ([Bouvier et al. 2015](http://dx.doi.org/10.1016/j.rse.2014.10.004 "Journal article credited with LAD metrics formulae"))

Leaf Area Density (LAD) profiles describe the vertical distribution of foliage within the canopy. LAD estimates the amount of leaf material in successive horizontal layers by modeling how lidar pulses are intercepted as they travel down through the vegetation.

```{r lad_metrics}
#| label: fig-metrics-lad
#| fig-cap: "Raster plots of Leaf Area Density (LAD) profile metrics, calculated at 10m resolution."
lad_metrics <- pixel_metrics(las, ~metrics_lad(z = Z), res = 10)
plot(lad_metrics)
```

`The Coefficient of Variation of LAD (lad_cv)` quantifies the uniformity of the vertical foliage distribution. A high `lad_cv` value indicates that foliage is concentrated in a specific layer (e.g., a simple, even-aged canopy), while a low value suggests foliage is more evenly spread across multiple layers, indicating greater vertical complexity.

```{r cvlad}
#| fig-cap: "Raster plot of the Coefficient of Variation of Leaf Area Density (lad_cv) calculated at 10m resolution."

plot(lad_metrics, "lad_cv")
```

[Dispersion and Vertical Complexity](https://ptompalski.github.io/lidRmetrics/reference/metrics_dispersion.html)

While standard deviation (`zsd`) gives a general sense of height variability, dispersion metrics provide a more nuanced characterization of how lidar points are distributed vertically within the canopy. They help quantify the structural complexity of vegetation, which is crucial for applications like habitat modeling and biomass estimation.

```{r dispersion_metrics}
#| label: fig-metrics-dispersion
#| fig-cap: "A collection of dispersion metrics calculated at 10m resolution."
# Calculate several dispersion metrics. zmax is required to compute VCI.
disp_metrics <- pixel_metrics(las, ~metrics_dispersion(z = Z, zmax = 40), res = 10)
plot(disp_metrics)

```

`Canopy Relief Ratio (CRR)` measures the position of the mean point height relative to the overall height range of the canopy. It is calculated as (mean(Z) - min(Z)) / (max(Z) - min(Z)). A value closer to 1 suggests that most of the vegetation volume is concentrated in the upper parts of the canopy.

```{r plot_crr}
#| label: fig-metrics-crr
#| fig-cap: "Canopy Relief Ratio (CRR) at 10m resolution, indicating the vertical position of the mean energy return within the canopy."
plot(disp_metrics, "CRR")
```

`Vertical Complexity Index (VCI)` uses entropy to quantify how evenly the lidar returns are distributed throughout the vertical profile. Higher VCI values indicate a more complex, multi-layered canopy structure (e.g., a forest with understory, mid-story, and overstory). Lower values suggest a simpler structure where points are clumped at specific heights (e.g., a field of grass or a dense, flat-topped plantation).

```{r plot_vci}
#| label: fig-metrics-vci
#| fig-cap: "Vertical Complexity Index (VCI) at 10m resolution. Higher values indicate a more complex vertical distribution of vegetation."
plot(disp_metrics, "VCI")
```

`User Defined Metrics`

We can also create our own user-defined metric functions. This demonstrates the flexibility of the `lidR` package!

Here we generate an arbitrary function to compute a weighted mean between two attributes. We then calculate the mean height of 10 m pixels weighted by return `Intensity` (albeit a potentially meaningless metric).

```{r user_defined_metric_pixel_metrics}
#| label: fig-metrics-user-defined
#| fig-cap: "Raster plot of a user-defined metric: the mean height (Z) weighted by return Intensity."
# Generate a user-defined function to compute weighted mean between two attributes
f <- function(x, weight) { sum(x*weight)/sum(weight) }

# Compute weighted mean of height (Z) as a function of return intensity
user_metric <- pixel_metrics(las = las, func = ~f(Z, Intensity), res = 10)

# Visualize the output
plot(user_metric)
```

## Exercises and Questions

Using:

``` r
las <- readLAS("data/fm_norm.laz")
```

#### E1.

Generate another metric set provided by the `lidRmetrics` package (voxel metrics will take too long)

#### E2.

Map the density of ground returns at a 5 m resolution (in points/m2). Hints: `filter = -keep_class 2` - what's the area of a 5 m pixel?

#### E3.

Assuming that biomass is estimated using the equation `B = 0.5 * mean Z + 0.9 * 90th percentile of Z` applied on first returns only, map the biomass.

## Conclusion

In this section of the tutorial, we covered basic usage of the `lidR` package for computing mean and max heights within grid cells and using predefined sets of metrics. Additionally, we explored the advanced usage with the ability to define user-specific metrics for grid computation.
