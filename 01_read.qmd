---
title: "Read/Plot/Query"
---

```{r setup, include=FALSE}
source("R/setup_rgl.R")
```

## Relevant Resources

-   [Code](https://github.com/liamirwin/SL25_lidRtutorial/blob/main/R/01_read.R)

-   [lidRbook section](https://r-lidar.github.io/lidRbook/io.html)

## Overview

Welcome to this lidar processing tutorial using R and the `lidR` package! In this tutorial, you will learn how to *read*, *visualize*, and *query* lidar data. We'll explore basic information about a lidar file including the *header* and *data frame* as well as *visualize* point clouds using different colour schemes based on attributes with `plot()`. We'll use the `select` argument in `readLAS()` to load specific attributes and the `filter` argument to only load points of interest or apply transformations on-the-fly.

Let's get started with processing lidar data efficiently using `lidR` and R! Happy learning!

## Environment

We start each page by loading the necessary packages, clearing our current environment, and specifying that some warnings be turned off to make our outputs clearer. We will do this for each section in the tutorial.

```{r clear_warnings, warnings = FALSE, message = FALSE}
# Clear environment
rm(list = ls(globalenv()))

# Load package
library(lidR)
```

## Basic Usage

### Load and Inspect lidar Data

Download these two `.laz` files to follow along with the next few pages:

[fm_class.laz (1.8mb)](/data/fm_class.laz)

[fm_norm.laz (1.8mb)](/data/fm_class.laz)

Load the lidar point cloud data from a LAS file using the `readLAS()` function. The data is stored in the `las` object. We can inspect the header information and attributes of the `las` object by calling the object.

```{r load_and_inspect_lidar_data}
# Load the sample point cloud
las <- readLAS(files = "data/fm_norm.laz")

# Inspect header information and print a summary
las

# Check the file size of the loaded lidar data
format(object.size(las), "Mb")
```

### Visualizing lidar Data

We can visualize the lidar data using the `plot()` function. We have several options to control the colours in the plot, such as selecting specific attributes from the data to be mapped.

::: callout-tip
## `plot()` background colour

Set the background of plots to white using `plot(las, bg = "white")`. To keep the website code clean I've omitted this from examples.
:::

``` r
plot(las)
```

```{r visualize_lidar_data, echo = FALSE, rgl = TRUE, fig.width = 8, fig.height = 6}
#| label: fig-basic
#| fig-cap: "Point cloud coloured by the Z (elevation) attribute."
# Visualize the lidar data with a default colour palette
plot(las, bg = "white")
```

## Point Classification

Lidar systems and pre-processing steps add extra information to point clouds, beyond just the X, Y, and Z coordinates of each point.

For instance, points are typically assigned `Classification` values to differentiate between surfaces. This is often already done by the data provider or through user applied algorithms to classify for example [noise and ground](https://rdrr.io/cran/lidR/man/classify.html "lidR classify function (not covered in this workshop)") points. The meaning of these ID values depends on the LAS file version and source.

::: callout-note
LAS Standard Point classification is now standardized by the American Society for Photogrammetry and Remote Sensing (ASPRS). For a complete list of classes, refer to the [LAS 1.4 specification (R15)](https://www.asprs.org/wp-content/uploads/2019/03/LAS_1_4_r14.pdf "LAS 1.4 specification document").
:::

Our example ALS dataset, collected in 2016 over ForÃªt Montmorency in Quebec uses an older **LAS 1.2 standard**. Its classification codes are interpreted as follows:

+------------+------------------+-------------------------------------------------------+------------------+
| Class Code | Meaning          | Interpretation                                        | Number of points |
+:===========+:=================+:======================================================+==================+
| 2          | **Ground**       | The bare earth surface.                               | ```              |
|            |                  |                                                       | 26788            |
|            |                  |                                                       | ```              |
+------------+------------------+-------------------------------------------------------+------------------+
| 1          | **Unclassified** | These points have yet to be assigned a classification | ```              |
|            |                  |                                                       | 239684           |
|            |                  |                                                       | ```              |
+------------+------------------+-------------------------------------------------------+------------------+

``` r
plot(las, color = "Classification")
```

```{r visualize_lidar_data_class, echo = FALSE, rgl = TRUE, fig.width = 8, fig.height = 6}
#| label: fig-classification
#| fig-cap: "Point cloud coloured by Classification. Ground is blue, vegetation is green."
# Visualize using the classification attribute as colours
plot(las, color = "Classification", bg = "white")
```

Lidar point clouds capture Return `Intensity` information; representing the *strength of the returning signal*. This attribute varies widely depending on sensor/acquisition characteristics and can be useful in biodiversity mapping.

``` r
plot(las, color = "Intensity")
```

```{r visualize_lidar_data_int, echo = FALSE, rgl = TRUE, fig.width = 8, fig.height = 6}
#| label: fig-intensity
#| fig-cap: "Point cloud coloured by the Intensity attribute."
# Visualize using intensity values as colours
plot(las, color = "Intensity", bg = "white")
```

Laser scanning systems record the scan angle of each pulse and attribute this information to the point cloud as `ScanAngleRank`.

``` r
plot(las, color = "ScanAngleRank")
```

```{r visualize_lidar_data_scan, echo = FALSE, rgl = TRUE, fig.width = 8, fig.height = 6}
#| label: fig-scan-angle
#| fig-cap: "Point cloud coloured by ScanAngleRank"
# Visualize using the scan angle rank as colours
plot(las, color = "ScanAngleRank", bg = "white")
```

## Filtering Dataset

Often we do not need the entire set of points or attributes (columns) loaded in memory for our analysis. We can use `Classification` as well as other attributes to pre-filter point clouds before further processing.

There are two key ways in `lidR` to achieve this.

### Filtering points on-the-fly (efficient)

First, we load subsets of the lidar points based on certain criteria using the `filter` argument in directly in `readLAS()`.

The `filter` argument in `readLAS()` can be useful for tasks such as filtering specific classifications, isolating ground, removing noise, etc...

```{r on_the_fly_transform}
# Load point cloud keeping only Classification 2 (ground returns)
las <- readLAS(files = "data/fm_class.laz", filter = "-keep_class 2")
```

Visualize the point cloud of *ground returns* using the `plot()` function.

``` r
plot(las)
```

```{r visualize_lidar_data_filter_class, echo = FALSE, rgl = TRUE, fig.width = 8, fig.height = 6}
#| label: fig-ground-filter
#| fig-cap: "Point cloud showing only ground points, filtered on readLAS with `-keep_class 2`."
plot(las, bg = "white")
```

Each lidar `pulse` can record multiple discrete `returns` (points).

Here we use a filter during `readLAS` to *subset only first returns*.

```{r filter_points}
# Load only the first return points
las <- readLAS(files = "data/fm_norm.laz", filter = "-keep_first")
# Inspect the loaded points
las
# Check the memory size after loading only the filtered points
format(object.size(las), "Mb")
```

Visualize the point cloud of *first returns* using the `plot()` function.

``` r
plot(las)
```

```{r visualize_lidar_data_filter, echo = FALSE, rgl = TRUE, fig.width = 8, fig.height = 6}
#| label: fig-first-returns
#| fig-cap: "Point cloud showing only first returns, filtered on load with `-keep_first`."
# Visualize the filtered points
plot(las, bg = "white")
```

The `readLAS()` function also allows us to *select specific attributes* (columns) to be loaded into memory. This is useful to reduce memory requirements when working with large lidar datasets.

```{r select_attributes}
# Load only the xyz coordinates (X, Y, Z) and ignore other attributes
las <- readLAS(files = "data/fm_norm.laz", select = "xyz")
# Inspect the loaded attributes
las@data
# Check the memory size (much smaller)
format(object.size(las), "Mb")
```

::: callout-tip
## See all `readLAS` pre-built filters

run `readLAS(filter = "-help")` for a full list of these filters.
:::

### Filtering Points using `filter_poi()`

Alternatively LASobjects loaded into memory with `readLAS()` can be filtered immediately using the `filter_poi()` function. These filters can be custom made by combining [boolean operators](https://www.r-bloggers.com/2021/09/r-booleans-comparison-and-logical-operators/ "Boolean operators in R") (==, !=, \>, \<, &, \|, etc...) with point cloud attributes to formulate logical statements. Statements are applied to points to assign `TRUE` (kept) or `FALSE` (filtered out) values.

```{r filter_poi_example}
# Load the lidar file with all the all attributes 
las <- readLAS(files = "data/fm_class.laz")
# Filter points with Classification == 2
class_2 <- filter_poi(las = las, Classification == 2L)

# Combine queries to filter points with Classification 2 and ReturnNumber == 1
first_returns <- filter_poi(las = las, Classification == 2L & ReturnNumber == 1L)
```

``` r
plot(class_2)
```

```{r visualize-filter-poi-ground, echo = FALSE, rgl = TRUE, fig.width = 8, fig.height = 6}
#| label: fig-filter-poi-ground
#| fig-cap: "Ground points filtered from the LAS object using `filter_poi()`."
plot(class_2, bg = "white")
```

``` r
plot(first_returns)
```

```{r visualize-first_ground, echo = FALSE, rgl = TRUE, fig.width = 8, fig.height = 6}
#| label: fig-filter-poi-first-ground
#| fig-cap: "First-return ground points filtered using `filter_poi()`."
plot(first_returns, bg = "white")
```

## Exercises and Questions

Using:

``` r
las <- readLAS(files = "data/fm_norm.laz")
```

#### E1.

Using the `plot()` function plot the point cloud with a different attribute that has not been done yet

Try adding axis = TRUE, legend = TRUE to your plot argument `plot(las, axis = TRUE, legend = TRUE)`

#### E2.

Create a filtered las object of returns that have an Intensity greater that 50, and plot it.

#### E3.

Read in the las file with only xyz and intensity only. Hint go to the [lidRbook section](https://r-lidar.github.io/lidRbook/io.html) to find out how to do this

## Conclusion

This tutorial section explored the basic usage of the `lidR` package in R for processing and analyzing lidar data. We covered loading lidar data, inspecting and visualizng the data, selceting specific attributes, and filtering points of interest. 

